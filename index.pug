doctype html
head
  script(type='text/javascript', src='as.js')
  include partials/head.pug
.interfaceContainer(style='width:95%; border:1px solid white; margin:20px')
  //- #header
  //- h2#content(style='text-align:center;margin-top:20px;') Engine is not Ready
  //-  h2#content-after(style='text-align:center;margin-top:20px;display:none') Engine Stopped
  //- #sidebar(style='display:none;float:left')
  //-   include partials/sidebarmain.pug
  div(style='display: inline-block; vertical-align: top;')
      h2 Flight Data Acquasition Unit!

      // Obstacle options
      //- div
      //-   | Obstacles: 
      //-   form(action='', style='display: inline-block; margin-right: 20px;')
      //-     input(type='radio', name='obstacle', value='', onclick='setObstacleLevel(0);this.blur();', checked='checked')
      //-     |  None
      //-     input(type='radio', name='obstacle', value='', onclick='setObstacleLevel(1);this.blur();')
      //-     |  Static
      //-     input(type='radio', name='obstacle', value='', onclick='setObstacleLevel(2);this.blur();')
      //-     |  Moving
      //-   a(href='javascript:void(0);', onclick="document.getElementById('instructions').style.display = 'block';") Click here for useful instructions!
      //- // Message board
      div
        p
          | Status: 
          span#msgDOM  
      // All other interfaces
  .interfaceContainer
    .column(style='width: 30%; float: left; margin: 1.5%')
      //- include partials/performance-general.pug
      h5 Engine Speed
      canvas#engine-speed-chart(width='100%')
      br
      th(style='width:100%; border: 1px solid white; border-collapse: collapse;')

      td(style='width:100%; border: 1px solid white; border-collapse: collapse;')

      table(style='width:100%; border: 1px solid white; border-collapse: collapse;')
        tbody
          tr
            th Part No.
            th Temperature
          
          tr
            td 1
            td 90
          br  
          tr
            td 2
            td 110
            
          tr
            td 3
            td 130
            

    .column(style='width: 30%; float: left; margin: 1.5%')
      h5 Height
      canvas#height(width='100%')
      br
      .interfaceDiv
        h4 Horizontal Velocity
        canvas#velocityGaugeCanvas(width='120', height='80')
        p#velocityGaugeValue  
      br
      
      .interfaceDiv(style='margin-top: 5px;')
        h4 Fuel
        canvas#fuelGaugeCanvas(width='120', height='80')
        p#fuelGaugeValue

    .column(style='width: 30%; float: left; margin: 1.5%')
      div(style='display: inline-block; margin-top: 5px;')
      .interfaceDiv(style='width:240px;')
        h4 Roll
        #rollSlider(style='width:220px; margin: auto; margin-top: 35px; margin-bottom: 30px; ')
        p#rollSliderValue
        .column(style='width: 30%; float: left; margin: 1.5%')
          .interfaceDiv(style='margin-top: 5px; width: 70px;')
            br
            h4 Pitch
            #pitchSlider(style='height:200px; margin: auto; margin-top: 20px; margin-bottom: 30px;')
            p#pitchSliderValue
        .column(style='width: 30%; float: left; margin: 1.5%')
          .interfaceDiv(style='width:100px; border:1px solid red; padding:5px')
            h4 Thrust
            #thrustSlider(style='height:200px; margin: auto; margin-top: 20px; margin-bottom: 30px;')
            p#thrustSliderValue  
                //- button#reverseButton(onclick="reverse=!reverse; this.style.borderStyle = (this.style.borderStyle!=='inset' ? 'inset' : 'outset'); ", style='border-style: outset;') Toggle reverse thrust (used after landing)



          br
          br
          br
        .interfaceDiv(style='margin-top: 5px; width: 70px;')
          h4 Height
          #heightSlider(style='height:200px; margin: auto; margin-top: 20px; margin-bottom: 30px;')
          p#heightSliderValue  
        .interfaceDiv(style='margin-top: 5px; width: 70px;')
          h4 Pitch
          #pitchSlider(style='height:200px; margin: auto; margin-top: 20px; margin-bottom: 30px;')
          p#pitchSliderValue  
        
             
    
          .interfaceDiv
            h4 Horizontal Velocity
            canvas#velocityGaugeCanvas(width='120', height='80')
            p#velocityGaugeValue  
          br
          
          .interfaceDiv(style='margin-top: 5px;')
            h4 Fuel
            canvas#fuelGaugeCanvas(width='120', height='80')
            p#fuelGaugeValue  
              
          br      
    
  include partials/footer.pug
doctype html
html(lang='en')
  head
  #viewer
    title Collins' Flight Simulator
    meta(charset='utf-8')
    meta(property='og:title', content="Collins' Flight Simulator")
    // All srcipts
    script(type='text/javascript', src='gl-matrix-min.js')
    script(type='text/javascript', src='webgl-utils.js')
    script(type='text/javascript', src='gauge.min.js')
    script(type='text/javascript', src='nouislider.min.js')
    script(type='text/javascript', src='startup.js')
    script(type='text/javascript', src='view.js')
    script(type='text/javascript', src='terrain.js')
    script(type='text/javascript', src='airplane.js')
    script(type='text/javascript', src='misc.js')
    script(type='text/javascript', src='interface.js')
    script(type='text/javascript', src='physics.js')
    script(type='text/javascript', src='webgl-debug.js')
    link(rel='stylesheet', type='text/css', href='nouislider.min.css')
  body(onload='startup();', style='height: 600px;')
    // Instructions
   
  center
    div(style='width: 520px; display: none; vertical-align: top;')
      canvas#myGLCanvas(width='500', height='500')
    // Interfaces
    // Shader program source codes (not displayed)
    #shader_codes(style='display:none;')
      // Terrain vertex shader
      // Gouraud shading with Phong reflection model
      #terrainVertexShaderDOM
        | attribute vec3 aVertexPosition;
        | attribute vec3 aVertexColor;
        | attribute vec3 aVertexNormal;
        | uniform mat4 uPMatrix;
        | uniform mat4 uMVMatrix;
        | uniform vec3 uViewOrigin;
        | uniform vec3 uLightDirection;
        | uniform vec3 uAmbientLight;
        | uniform vec3 uDiffuseLight;
        | uniform vec3 uSpecularLight;
        | const float shininess = 12.0;
        | varying vec4 vColor;
        | void main(void) {
        | gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        | vec3 normalizedLightDirection = normalize(uLightDirection);
        | vec3 vectorReflection = normalize( reflect(-normalizedLightDirection, aVertexNormal) );
        | vec3 vectorView = normalize( uViewOrigin - aVertexPosition );
        | float diffuseLightWeighting = max( dot(aVertexNormal, normalizedLightDirection), 0.0 );
        | float specularLightWeighting = pow( max( dot(vectorReflection, vectorView), 0.0), shininess );
        | vColor= vec4( ( uAmbientLight * aVertexColor)
        | + ((uDiffuseLight * aVertexColor) * diffuseLightWeighting)
        | + ( uSpecularLight * specularLightWeighting),
        | 1.0 );
        | }
      // Terrain fragment shader
      #terrainFragmentShaderDOM
        | precision mediump float;
        | varying vec4 vColor;
        | void main(void) {
        | gl_FragColor = vColor;
        | }
      // Airplane vertex shader
      // Phong shading with Phong reflection model
      #airplaneVertexShaderDOM
        | attribute vec3 aVertexPosition;
        | attribute vec3 aVertexColor;
        | attribute vec3 aVertexNormal;
        | uniform mat4 uPMatrix;
        | uniform mat4 uMVMatrix;
        | uniform mat4 uModelMatrix;
        | varying vec3 vWorldPosition;
        | varying vec3 vWorldNormal;
        | varying vec3 vVertexColor;
        | void main(void) {
        | vec4 worldPosition = uModelMatrix * vec4(aVertexPosition, 1.0);
        | vWorldPosition = vec3(worldPosition);
        | vWorldNormal = normalize(mat3(uModelMatrix) * aVertexNormal);
        | vVertexColor = aVertexColor;
        | gl_Position = uPMatrix * uMVMatrix * worldPosition;
        | }
      // Airplane fragment shader
      #airplaneFragmentShaderDOM
        | precision mediump float;
        | const float shininess = 50.0;
        | uniform vec3 uViewOrigin;
        | uniform vec3 uLightDirection;
        | uniform vec3 uAmbientLight;
        | uniform vec3 uDiffuseLight;
        | uniform vec3 uSpecularLight;
        | varying vec3 vWorldPosition;
        | varying vec3 vWorldNormal;
        | varying vec3 vVertexColor;
        | void main(void) {
        | vec3 worldPosition = vWorldPosition;
        | vec3 worldNormal = normalize(vWorldNormal);
        | vec3 normalizedLightDirection = normalize(uLightDirection);
        | vec3 vectorReflection = normalize( reflect(-normalizedLightDirection, worldNormal) );
        | vec3 vectorView = normalize( uViewOrigin - worldPosition );
        | float diffuseLightWeighting = max( dot(worldNormal, normalizedLightDirection), 0.0 );
        | float specularLightWeighting = pow( max( dot(vectorReflection, vectorView), 0.0), shininess );
        | gl_FragColor = vec4( ( uAmbientLight * vVertexColor)
        | + ((uDiffuseLight * vVertexColor) * diffuseLightWeighting)
        | + ( uSpecularLight * specularLightWeighting),
        | 1.0 );
        | }
      // Misc vertex shader
      // Gouraud shading with Phong reflection model (no specular part)
      #miscVertexShaderDOM
        | attribute vec3 aVertexPosition;
        | attribute vec3 aVertexColor;
        | attribute vec3 aVertexNormal;
        | uniform mat4 uPMatrix;
        | uniform mat4 uMVMatrix;
        | uniform vec3 uViewOrigin;
        | uniform vec3 uLightDirection;
        | uniform vec3 uAmbientLight;
        | uniform vec3 uDiffuseLight;
        | uniform vec3 uSpecularLight;
        | varying vec4 vColor;
        | void main(void) {
        | gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        | vec3 normalizedLightDirection = normalize(uLightDirection);
        | vec3 vectorReflection = normalize( reflect(-normalizedLightDirection, aVertexNormal) );
        | vec3 vectorView = normalize( uViewOrigin - aVertexPosition );
        | float diffuseLightWeighting = max( dot(aVertexNormal, normalizedLightDirection), 0.0 );
        | vColor= vec4( ( uAmbientLight * aVertexColor)
        | + ((uDiffuseLight * aVertexColor) * diffuseLightWeighting),
        | 1.0 );
        | }
      // Misc fragment shader
      #miscFragmentShaderDOM
        | precision mediump float;
        | varying vec4 vColor;
        | void main(void) {
        | gl_FragColor = vColor;
        | }
    style(type='text/css').
      .interfaceDiv {
      display: inline-block;
      position: relative;
      text-align: center;
      vertical-align: top;
      }
      .interfaceDiv > * {
      margin: 0px;
      }
    script(type='text/javascript').
      const Interval =  setInterval(check,2000);
      function check(){
      var a = getLiftForces();
      if(a != 0){
      document.cookie =
      'start=true;path=/'
      console.log("Engine Started");
      clearInterval(Interval);
      }
      }
      const Intervals = setInterval(as,2000);
      function getLiftForces(){
      /** Lift force = KEY_COEFF * LIFT_FORCE_COEFF * horizontal velocity */
      if (currentlyPressedKeys[38] || currentlyPressedKeys[87]) {
      /** More lift force when Up-arrow or W is pressed. */
      return LIFT_PITCH_COEFF[2] * LIFT_FORCE_COEFF * getHorizontalVelocity();
      }else if (currentlyPressedKeys[40] || currentlyPressedKeys[83]) {
      /** Less lift force when Down-arrow or S is pressed. */
      return LIFT_PITCH_COEFF[0] * LIFT_FORCE_COEFF * getHorizontalVelocity();
      }else{
      /** Default lift force. */
      return LIFT_PITCH_COEFF[1] * LIFT_FORCE_COEFF * getHorizontalVelocity();
      }
      }
      function as() {
      if(!playing){
      document.cookie =
      'stop=true;path=/'
      console.log("Engine Stopped");
      clearInterval(Intervals);
      }
      // body...
      }
      document.cookie.split(";").forEach(function(c) { document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); });